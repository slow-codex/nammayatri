imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  LocationAddress: Domain.Types.LocationAddress

SearchReqLocation:
  tableName: search_request_location

  derives: "Generic, Show, Kernel.External.Maps.HasCoordinates"

  fields:
    id: Id SearchReqLocation
    lat: Double
    lon: Double
    address: LocationAddress
    createdAt: UTCTime
    updatedAt: UTCTime

  types:
    SearchReqLocationAPIEntity:
      lat: Double
      lon: Double

  beamFields:
    address:
      street: Maybe Text
      door: Maybe Text
      city: Maybe Text
      state: Maybe Text
      country: Maybe Text
      building: Maybe Text
      areaCode: Maybe Text
      area: Maybe Text
      ward: Maybe Text
      placeId: Maybe Text
      instructions: Maybe Text
      title: Maybe Text
      extras: Maybe Text

  sqlType:
    street: character varying(255)
    door: character varying(255)
    city: character varying(255)
    state: character varying(255)
    country: character varying(255)
    building: character varying(255)
    areaCode: character varying(255)
    area: character varying(255)
    ward: character varying(255)

  toTType:
    street: Domain.Types.LocationAddress.street|I
    door: Domain.Types.LocationAddress.door|I
    city: Domain.Types.LocationAddress.city|I
    state: Domain.Types.LocationAddress.state|I
    country: Domain.Types.LocationAddress.country|I
    building: Domain.Types.LocationAddress.building|I
    areaCode: Domain.Types.LocationAddress.areaCode|I
    area: Domain.Types.LocationAddress.area|I
    ward: Domain.Types.LocationAddress.ward|I
    placeId: Domain.Types.LocationAddress.placeId|I
    instructions: Domain.Types.LocationAddress.instructions|I
    title: Domain.Types.LocationAddress.title|I
    extras: Domain.Types.LocationAddress.extras|I

  fromTType:
    address: mkLocationAddress

  excludedFields: [merchantId, merchantOperatingCityId]

  constraints:
    id: PrimaryKey
