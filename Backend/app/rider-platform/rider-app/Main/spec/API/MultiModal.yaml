imports:
  Journey: Domain.Types.Journey
  SearchRequest: Domain.Types.SearchRequest
  Estimate: Domain.Types.Estimate
  LocationAddress: Domain.Types.LocationAddress
  PriceAPIEntity : Kernel.Types.Common
  FRFSStationAPI : API.Types.UI.FRFSTicketService
  MultimodalTravelMode : Domain.Types.Trip
  LocationAPIEntity : Domain.Types.Location
  LegInfo: Lib.JourneyModule.Types
  JourneyLeg: Domain.Types.JourneyLeg
  LatLong: Kernel.External.Maps.Types
  LatLngV2: Kernel.External.Maps.Google.MapsClient.Types
  Price: Kernel.Types.Common
  JourneyLegStatus : Lib.JourneyLeg.Types
  UnifiedTicketQR: Lib.JourneyModule.Types
  FRFSBookingPaymentStatusAPI: API.Types.UI.FRFSTicketService
  CreateOrderResp: Kernel.External.Payment.Juspay.Types
  ExtendLegStartPoint: Lib.JourneyModule.Types
  GetFareResponse: Lib.JourneyModule.Types

module: MultimodalConfirm

types:
  JourneyInfoResp:
    estimatedDuration: Maybe Seconds
    estimatedMinFare: PriceAPIEntity
    estimatedMaxFare: PriceAPIEntity
    estimatedDistance: Distance
    journeyStatus: Domain.Types.Journey.JourneyStatus
    unifiedQR: Maybe UnifiedTicketQR
    legs: [LegInfo]

  LegStatus:
    legOrder: Int
    status: JourneyLegStatus
    vehiclePosition: Maybe LatLong
    userPosition: Maybe LatLong

  JourneyStatusResp:
    journeyStatus: Domain.Types.Journey.JourneyStatus
    legs: "[LegStatus]"

  ExtendLegReq:
    distance: Distance
    duration : Seconds
    fare: GetFareResponse
    startLocation: ExtendLegStartPoint
    endLocation: Maybe LocationAPIEntity

  ExtendLegGetFareReq:
    startLocation: ExtendLegStartPoint
    endLocation: Maybe LocationAPIEntity

  ExtendLegGetFareResp:
    totalFare : Maybe GetFareResponse
    distance : Distance
    duration : Seconds

  RiderLocationReq:
    latLong: LatLong
    currTime: UTCTime

  SwitchLegReq:
    newMode: MultimodalTravelMode
    legOrder : Int
    startLocation : Maybe LatLngV2
    originAddress: Maybe LocationAddress

  SwitchTaxiReq:
    estimateId: Id Estimate

  JourneyBookingPaymentStatus:
    journeyId: Id Journey
    paymentOrder: Maybe PaymentOrder

  PaymentOrder:
    sdkPayload: Maybe CreateOrderResp
    status: FRFSBookingPaymentStatusAPI

  JourneyFeedBackForm:
    rating: Maybe Int
    rateTravelMode: [RateMultiModelTravelModes]
    additionalFeedBack: Maybe Text

  RateMultiModelTravelModes:
    travelMode: MultimodalTravelMode
    isExperienceGood: Maybe Bool
    legOrder: Int

apis:
  - POST:
      endpoint: /multimodal/{journeyId}/initiate
      params:
        journeyId: Id Journey
      response:
        type: JourneyInfoResp
  - POST:
      endpoint: /multimodal/{journeyId}/confirm
      params:
        journeyId: Id Journey
      query:
        forceBookLegOrder: Int
      response:
        type: Kernel.Types.APISuccess.APISuccess
  - GET:
      endpoint: /multimodal/{journeyId}/booking/info
      params:
        journeyId: Id Journey
      response:
        type: JourneyInfoResp
  - GET:
      endpoint: /multimodal/{journeyId}/booking/paymentStatus
      params:
        journeyId: Id Journey
      response:
        type: JourneyBookingPaymentStatus

  - POST:
      endpoint: /multimodal/{journeyId}/switch                          # combine with other legs if they match
      params:
        journeyId: Id Journey
      request:
        type: SwitchLegReq
      response:
        type: Kernel.Types.APISuccess.APISuccess                    # send new leg

  - POST:
      endpoint: multimodal/journey/{journeyId}/leg/{legOrder}/skip
      params:
        journeyId: Id Journey
        legOrder: Int
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: /multimodal/extend/{journeyId}/leg                    # only applicable for current leg
      request:
        type: ExtendLegReq
      params:
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: /multimodal/extend/{journeyId}/leg/getfare                    # only applicable for current leg
      request:
        type: ExtendLegGetFareReq
      params:
        journeyId: Id Journey
      response:
        type: ExtendLegGetFareResp

  - GET:
      endpoint: /multimodal/journey/{journeyId}/status
      params:
        journeyId: Id Journey
      response:
        type: JourneyStatusResp

  - POST:
      endpoint: multimodal/journey/{journeyId}/cancel
      params:
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: multimodal/{journeyId}/rider/location
      params:
        journeyId: Id Journey
      request:
        type: RiderLocationReq
      response:
        type: JourneyStatusResp

  - POST:
      endpoint: multimodal/{journeyId}/order/{legOrder}/switchTaxi
      params:
        journeyId: Id Journey
        legOrder: Int
      request:
        type: SwitchTaxiReq
      response:
        type: JourneyInfoResp

  - POST:
      endpoint: multimodal/{journeyId}/journeyFeedback
      params:
        journeyId: Id Journey
      request:
        type: JourneyFeedBackForm
      response:
        type: Kernel.Types.APISuccess.APISuccess
