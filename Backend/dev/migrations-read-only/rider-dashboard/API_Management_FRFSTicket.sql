-- {"api":"GetFRFSTicketFrfsRoutes","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS LIST_FRFS_ROUTES","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/GET_FRFS_TICKET_FRFS_ROUTES' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'LIST_FRFS_ROUTES' ) ON CONFLICT DO NOTHING;

-- {"api":"PostFRFSTicketFrfsRouteAdd","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS ADD_FRFS_ROUTE","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/POST_FRFS_TICKET_FRFS_ROUTE_ADD' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'ADD_FRFS_ROUTE' ) ON CONFLICT DO NOTHING;

-- {"api":"PostFRFSTicketFrfsRouteDelete","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS DELETE_FRFS_ROUTE","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/POST_FRFS_TICKET_FRFS_ROUTE_DELETE' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'DELETE_FRFS_ROUTE' ) ON CONFLICT DO NOTHING;

-- {"api":"GetFRFSTicketFrfsRouteFareList","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS LIST_FRFS_ROUTE_FARE","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/GET_FRFS_TICKET_FRFS_ROUTE_FARE_LIST' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'LIST_FRFS_ROUTE_FARE' ) ON CONFLICT DO NOTHING;

-- {"api":"PutFRFSTicketFrfsRouteFareUpsert","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS UPSERT_FRFS_ROUTE_FARE","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/PUT_FRFS_TICKET_FRFS_ROUTE_FARE_UPSERT' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'UPSERT_FRFS_ROUTE_FARE' ) ON CONFLICT DO NOTHING;

-- {"api":"GetFRFSTicketFrfsRouteStations","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS LIST_FRFS_STATION","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/GET_FRFS_TICKET_FRFS_ROUTE_STATIONS' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'LIST_FRFS_STATION' ) ON CONFLICT DO NOTHING;

-- {"api":"PostFRFSTicketFrfsStationAdd","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS ADD_FRFS_STATION","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/POST_FRFS_TICKET_FRFS_STATION_ADD' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'ADD_FRFS_STATION' ) ON CONFLICT DO NOTHING;

-- {"api":"PostFRFSTicketFrfsStationDelete","migration":"userActionType","param":"ApiAuth APP_BACKEND FRFS DELETE_FRFS_STATION","schema":"atlas_bap_dashboard"}
INSERT INTO atlas_bap_dashboard.access_matrix (id, role_id, api_entity, user_access_type, user_action_type) ( SELECT atlas_bap_dashboard.uuid_generate_v4(), T1.role_id, 'DSL', 'USER_FULL_ACCESS', 'RIDER_MANAGEMENT/FRFS_TICKET/POST_FRFS_TICKET_FRFS_STATION_DELETE' FROM atlas_bap_dashboard.access_matrix AS T1 WHERE T1.user_access_type = 'USER_FULL_ACCESS' AND T1.api_entity = 'FRFS' AND T1.user_action_type = 'DELETE_FRFS_STATION' ) ON CONFLICT DO NOTHING;
