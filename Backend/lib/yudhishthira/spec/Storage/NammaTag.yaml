imports:
  TagRule: Lib.Yudhishthira.Types
  Chakra: Lib.Yudhishthira.Types
  ApplicationEvent: Lib.Yudhishthira.Types
  TagValues: Lib.Yudhishthira.Types
  Hours: Kernel.Types.Common
  Value: Data.Aeson

NammaTag:
  tableName: namma_tag
  types:
    TagInfo:
      enum: "Application ApplicationTagInfo, KaalChakra KaalChakraTagInfo, Manual"
    TagType:
      enum: "ApplicationTag, KaalChakraTag, ManualTag"
    ApplicationTagInfo:
      recordType: NewType
      event: ApplicationEvent
      derive: "Eq,Ord,Read"
    KaalChakraTagInfo:
      chakra: Chakra
      validity: Maybe Hours
      derive: "Eq,Ord,Read"

  fields:
    name: Text
    description: Maybe Text
    category: Text
    possibleValues: TagValues
    rule: TagRule
    info: TagInfo
    actionEngine: Maybe Value

  constraints:
    name: PrimaryKey

  beamFields:
    info:
      tagType: TagType
      event: Maybe ApplicationEvent
      chakra: Maybe Chakra
      validity: Maybe Hours
    possibleValues:
      tags: Maybe [Text]
      rangeStart: Maybe Double
      rangeEnd: Maybe Double
    rule:
      llmContext: Maybe Text
      ruleEngine: Maybe Value

  fromTType:
    info: mkTagInfo
    possibleValues: mkTagValues
    rule: mkTagRule

  toTType:
    tagType: getTag
    event: getEvent
    chakra: getChakra
    validity: getValidity
    tags: getTags
    rangeStart: getRangeStart
    rangeEnd: getRangeEnd
    ruleEngine: getRuleEngine
    llmContext: getLlmContext

  queries:
    deleteByPrimaryKey:
      kvFunction: deleteWithKV
      where: name

  sqlType:
    ruleEngine: json
    actionEngine: json

  extraOperations:
    - EXTRA_QUERY_FILE

  beamInstance: MakeTableInstancesGenericSchema
  defaultQueryTypeConstraint: "(Lib.Yudhishthira.Storage.Beam.BeamFlow.BeamFlow m r)"
